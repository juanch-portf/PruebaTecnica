package com.jacg.Prueba.Exception;

public class GlobalExceptionHandler {
	package com.jacg.Prueba.exception;

	import org.springframework.http.HttpStatus;
	import org.springframework.http.ResponseEntity;
	import org.springframework.validation.FieldError;
	import org.springframework.web.bind.MethodArgumentNotValidException;
	import org.springframework.web.bind.annotation.ExceptionHandler;
	import org.springframework.web.bind.annotation.RestControllerAdvice;

	import java.time.LocalDateTime;
	import java.util.HashMap;
	import java.util.Map;

	@RestControllerAdvice
	public class GlobalExceptionHandler {
	    
	    @ExceptionHandler(NotFoundException.class)
	    public ResponseEntity<ErrorResponse> handleNotFoundException(NotFoundException ex) {
	        ErrorResponse error = ErrorResponse.builder()
	                .timestamp(LocalDateTime.now())
	                .status(HttpStatus.NOT_FOUND.value())
	                .error("Not Found")
	                .message(ex.getMessage())
	                .build();
	        
	        return new ResponseEntity<>(error, HttpStatus.NOT_FOUND);
	    }
	    
	    @ExceptionHandler(BadRequestException.class)
	    public ResponseEntity<ErrorResponse> handleBadRequestException(BadRequestException ex) {
	        ErrorResponse error = ErrorResponse.builder()
	                .timestamp(LocalDateTime.now())
	                .status(HttpStatus.BAD_REQUEST.value())
	                .error("Bad Request")
	                .message(ex.getMessage())
	                .build();
	        
	        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
	    }
	    
	    @ExceptionHandler(MethodArgumentNotValidException.class)
	    public ResponseEntity<ErrorResponse> handleValidationExceptions(MethodArgumentNotValidException ex) {
	        Map<String, String> errors = new HashMap<>();
	        ex.getBindingResult().getAllErrors().forEach((error) -> {
	            String fieldName = ((FieldError) error).getField();
	            String errorMessage = error.getDefaultMessage();
	            errors.put(fieldName, errorMessage);
	        });
	        
	        ErrorResponse error = ErrorResponse.builder()
	                .timestamp(LocalDateTime.now())
	                .status(HttpStatus.BAD_REQUEST.value())
	                .error("Validation Error")
	                .message("Errores de validaci√≥n")
	                .validationErrors(errors)
	                .build();
	        
	        return new ResponseEntity<>(error, HttpStatus.BAD_REQUEST);
	    }
	    
	    @ExceptionHandler(Exception.class)
	    public ResponseEntity<ErrorResponse> handleGenericException(Exception ex) {
	        ErrorResponse error = ErrorResponse.builder()
	                .timestamp(LocalDateTime.now())
	                .status(HttpStatus.INTERNAL_SERVER_ERROR.value())
	                .error("Internal Server Error")
	                .message(ex.getMessage())
	                .build();
	        
	        return new ResponseEntity<>(error, HttpStatus.INTERNAL_SERVER_ERROR);
	    }
	}

}
